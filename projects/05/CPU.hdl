// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A/C Instruction Handling
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=muxout1);
    Not(in=instruction[15], out=nota);
    // Should load A Register if its an A instruction OR if the A Register is a specified destination
    Or(a=nota, b=instruction[5], out=aregload);
    ARegister(in=muxout1, load=aregload, out=aregout, out[0..14]=addressM);

    // A/M routing
    Mux16(a=aregout, b=inM, sel=instruction[12], out=muxout2);

    // ALU
    ALU(x=dregout, y=muxout2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=aluout, out=outM);

    // D Register
    And(a=instruction[15], b=instruction[4], out=dregload);
    DRegister(in=aluout, load=dregload, out=dregout);

    // Program Counter Load Bit Calculations
    // NOTE: jump bits are presented in their reverse order, since that is how all bits are processed in Nand2Tetris (msb is in 0-index, lsb is in n-index)
    DMux8Way(in=instruction[15], sel=instruction[0..2], a=nojump, b=gt, c=eq, d=gte, e=lt, f=neq, g=lte, h=jumpout);
    // 000 (no jump, no processing required)
    // 001 (jump if less than)
    And(a=ng, b=lt, out=ltout);
    // 010 (jump if equal to 0)
    And(a=zr, b=eq, out=eqout);
    // 011 (jump if less than or equal to)
    Or(a=zr, b=ng, out=orzrngout);
    And(a=lte, b=orzrngout, out=lteout);
    // 100 (jump if greater than)
    Not(in=zr, out=notzrout);
    Not(in=ng, out=notngout);
    And(a=notzrout, b=notngout, out=andnotzroutnotngout);
    And(a=andnotzroutnotngout, b=gt, out=gtout);
    // 101 (jump if not equal)
    And(a=notzrout, b=neq, out=neqout);
    // 110 (jump if greater than or equal to)
    And(a=notngout, b=gte, out=gteout);
    // 111 (unconditional jump, no processing required)
    
    // Determine if ANY of the jump conditions were met
    Or8Way(in[0]=jumpout, in[1]=ltout, in[2]=eqout, in[3]=lteout, in[4]=gtout, in[5]=neqout, in[6]=gteout, in[7]=jumpout, out=or8wayjumpout);

    // Not(in=or8wayjumpout, out=notor8wayjumpout);

    // Program Counter
    PC(in=aregout, load=or8wayjumpout, inc=true, reset=reset, out[0..14]=pc);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
}